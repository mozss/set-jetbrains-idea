<application>
  <component name="AppStorage">
    <option name="maxHistorySize" value="100" />
    <option name="newTranslationDialogCollapseDictViewer" value="false" />
    <option name="newTranslationDialogHeight" value="458" />
    <option name="newTranslationDialogWidth" value="458" />
    <option name="newTranslationDialogX" value="1407" />
    <option name="newTranslationDialogY" value="-1002" />
    <histories>
      <item value="Web Services client utilities" />
      <item value="Utilities and classes related to validation" />
      <item value="Contains miscellaneous utility classes" />
      <item value="Support classes for reading annotation and class-level metadata." />
      <item value="Utilities and classes related to task execution and scheduling" />
      <item value="General system support classes" />
      <item value="Support for initialization of an SQL database" />
      <item value="Classes and utilities for Spring Security" />
      <item value="Support classes for Reactor integration" />
      <item value="Support for R2DBC connectivity." />
      <item value="JPA Support classes" />
      <item value="Support for item origin tracking." />
      <item value="Support and abstractions across several logging libraries." />
      <item value="Custom support for Liquibase database migration." />
      <item value="Support for parsing JSON." />
      <item value="Support for jOOQ" />
      <item value="Support for Java Message Service (JMS)." />
      <item value="Support for Java Database Connectivity (JDBC)" />
      <item value="Custom enhancements and support for the Jackson project" />
      <item value="Support for providing information about an application." />
      <item value="Custom support for Flyway database migration." />
      <item value="Spring {@link org.springframework.core.env.Environment} support" />
      <item value="Support for failure analysis and reporting" />
      <item value="Support for type conversion." />
      <item value="Classes related to Spring's {@link org.springframework.context.ApplicationContext}." />
      <item value="Low level support for Cloud deployments" />
      <item value="Fluent 'builder' style API to construct a" />
      <item value="Support for describing the availability of Spring Boot applications." />
      <item value="Support classes to provide ANSI color output" />
      <item value="Administration support for Spring Boot applications." />
      <item value="Core Spring Boot classes" />
      <item value="Contains classes related to developing beans -- components based on the JavaBeans™ architecture." />
      <item value="Provides for system input and output through data streams, serialization and the file system." />
      <item value="Provides classes that are fundamental to the design of the Java programming language." />
      <item value="Provides classes for reading and writing the standard ZIP and GZIP file formats." />
      <item value="Classes to support functional-style operations on streams of elements, such as map-reduce transformations on collections." />
      <item value="Service provider classes for the classes in the java.util package" />
      <item value="Service provider classes for the classes in the java.util package." />
      <item value="Classes for matching character sequences against patterns specified by regular expressions." />
      <item value="This package allows applications to store and retrieve user and system preference and configuration data." />
      <item value="Provides the classes and interfaces of the JavaTM 2 platform's core logging facilities." />
      <item value="Provides classes for reading and writing the JAR (Java ARchive) file format, which is based on the standard ZIP file format with an optional manifest file." />
      <item value="Functional interfaces provide target types for lambda expressions and method references." />
      <item value="Interfaces and classes providing a framework for locking and waiting for conditions that is distinct from built-in synchronization and monitors." />
      <item value="A small toolkit of classes that support lock-free thread-safe programming on single variables." />
      <item value="Utility classes commonly useful in concurrent programming." />
      <item value="Contains the collections framework, legacy collection classes, event model, date and time facilities, internationalization, and miscellaneous utility classes (a string tokenizer, a random-number generator, and a bit array)." />
      <item value="Support for time-zones and their rules." />
      <item value="Access to date and time using fields and units, and date time adjusters." />
      <item value="Provides classes to print and parse dates and times." />
      <item value="Generic API for calendar systems other than the default ISO." />
      <item value="The main API for dates, times, instants, and durations." />
      <item value="Provides classes and interfaces for handling text, dates, numbers, and messages in a manner independent of natural languages." />
      <item value="Provides the API for accessing and processing data stored in a data source (usually a relational database) using the JavaTM programming language." />
      <item value="Provides classes and interfaces for key specifications and algorithm parameter specifications." />
      <item value="Provides interfaces for generating RSA (Rivest, Shamir and Adleman AsymmetricCipher algorithm) keys as defined in the RSA Laboratory Technical Note PKCS#1, and DSA (Digital Signature Algorithm) keys as defined in NIST's FIPS-186." />
      <item value="提供用于解析和管理证书、证书吊销列表 (CRL) 和证书路径的类和接口。" />
      <item value="Provides classes and interfaces for parsing and managing certificates, certificate revocation lists (CRLs), and certification paths." />
      <item value="The classes and interfaces in this package have been superseded by classes in the java.security package." />
      <item value="Provides the classes and interfaces for the security framework." />
      <item value="Provides classes and interfaces for supporting the server side of RMI." />
      <item value="Provides a class and two interfaces for the RMI registry." />
      <item value="Provides classes and interface for RMI distributed garbage-collection (DGC)." />
      <item value="Provides support for RMI Object Activation." />
      <item value="Interfaces and classes providing access to file and file system attributes." />
      <item value="Defines interfaces and classes for the Java virtual machine to access files, file attributes, and file systems." />
      <item value="Defines charsets, decoders, and encoders, for translating between bytes and Unicode characters." />
      <item value="Service-provider classes for the java.nio.channels package." />
      <item value="Defines channels, which represent connections to entities that are capable of performing I/O operations, such as files and sockets; defines selectors, for multiplexed, non-blocking I/O operations." />
      <item value="Defines buffers, which are containers for data, and provides an overview of the other NIO packages." />
      <item value="Provides the classes for implementing networking applications." />
      <item value="Provides classes for performing arbitrary-precision integer arithmetic (BigInteger) and arbitrary-precision decimal arithmetic (BigDecimal)." />
      <item value="Provides reference-object classes, which support a limited degree of interaction with the garbage collector." />
      <item value="Provides classes and interfaces for obtaining reflective information about classes and objects." />
      <item value="Provides the management interfaces for monitoring and management of the Java virtual machine and other components in the Java runtime." />
      <item value="The java.lang.invoke package contains dynamic language support provided directly by the Java core class libraries and virtual machine." />
      <item value="你从事什么职业" />
      <item value="你从事什么" />
      <item value="你从事" />
      <item value="你" />
      <item value="trie&#10;" />
      <item value="解决问题" />
      <item value="!binsh ---------------------------------------------------------------------------- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http:www.apache.orglicensesLICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ---------------------------------------------------------------------------- ---------------------------------------------------------------------------- Maven2 Start Up Batch script Required ENV vars: ------------------ JAVA_HOME - location of a JDK home dir Optional ENV vars ----------------- M2_HOME - location of maven2's installed home dir MAVEN_OPTS - parameters passed to the Java VM when running Maven e.g. to debug Maven itself, use set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000 MAVEN_SKIP_RC - flag to disable loading of mavenrc files ---------------------------------------------------------------------------- if [ -z &quot;MAVEN_SKIP_RC&quot; ] ; then if [ -f etcmavenrc ] ; then . etcmavenrc fi if [ -f &quot;HOME.mavenrc&quot; ] ; then . &quot;HOME.mavenrc&quot; fi fi OS specific support. var _must_ be set to either true or false. cygwin=false; darwin=false; mingw=false case &quot;`uname`&quot; in CYGWIN) cygwin=true ;; MINGW) mingw=true;; Darwin) darwin=true Look for the Apple JDKs first to preserve the existing behaviour, and then look for the new JDKs provided by Oracle. if [ -z &quot;JAVA_HOME&quot; ] &amp;&amp; [ -L SystemLibraryFrameworksJavaVM.frameworkVersionsCurrentJDK ] ; then Apple JDKs export JAVA_HOME=SystemLibraryFrameworksJavaVM.frameworkVersionsCurrentJDKHome fi if [ -z &quot;JAVA_HOME&quot; ] &amp;&amp; [ -L SystemLibraryJavaJavaVirtualMachinesCurrentJDK ] ; then Apple JDKs export JAVA_HOME=SystemLibraryJavaJavaVirtualMachinesCurrentJDKContentsHome fi if [ -z &quot;JAVA_HOME&quot; ] &amp;&amp; [ -L &quot;LibraryJavaJavaVirtualMachinesCurrentJDK&quot; ] ; then Oracle JDKs export JAVA_HOME=LibraryJavaJavaVirtualMachinesCurrentJDKContentsHome fi if [ -z &quot;JAVA_HOME&quot; ] &amp;&amp; [ -x &quot;usrlibexecjava_home&quot; ]; then Apple JDKs export JAVA_HOME=`usrlibexecjava_home` fi ;; esac if [ -z &quot;JAVA_HOME&quot; ] ; then if [ -r etcgentoo-release ] ; then JAVA_HOME=`java-config --jre-home` fi fi if [ -z &quot;M2_HOME&quot; ] ; then resolve links - 0 may be a link to maven's home PRG=&quot;0&quot; need this for relative symlinks while [ -h &quot;PRG&quot; ] ; do ls=`ls -ld &quot;PRG&quot;` link=`expr &quot;ls&quot; : '.-&gt; \(.\)'` if expr &quot;link&quot; : '.' &gt; devnull; then PRG=&quot;link&quot; else PRG=&quot;`dirname &quot;PRG&quot;`link&quot; fi done saveddir=`pwd` M2_HOME=`dirname &quot;PRG&quot;`.. make it fully qualified M2_HOME=`cd &quot;M2_HOME&quot; &amp;&amp; pwd` cd &quot;saveddir&quot; echo Using m2 at M2_HOME fi For Cygwin, ensure paths are in UNIX format before anything is touched if cygwin ; then [ -n &quot;M2_HOME&quot; ] &amp;&amp; M2_HOME=`cygpath --unix &quot;M2_HOME&quot;` [ -n &quot;JAVA_HOME&quot; ] &amp;&amp; JAVA_HOME=`cygpath --unix &quot;JAVA_HOME&quot;` [ -n &quot;CLASSPATH&quot; ] &amp;&amp; CLASSPATH=`cygpath --path --unix &quot;CLASSPATH&quot;` fi For Migwn, ensure paths are in UNIX format before anything is touched if mingw ; then [ -n &quot;M2_HOME&quot; ] &amp;&amp; M2_HOME=&quot;`(cd &quot;M2_HOME&quot;; pwd)`&quot; [ -n &quot;JAVA_HOME&quot; ] &amp;&amp; JAVA_HOME=&quot;`(cd &quot;JAVA_HOME&quot;; pwd)`&quot; TODO classpath? fi if [ -z &quot;JAVA_HOME&quot; ]; then javaExecutable=&quot;`which javac`&quot; if [ -n &quot;javaExecutable&quot; ] &amp;&amp; ! [ &quot;`expr \&quot;javaExecutable\&quot; : '\([^ ]\)'`&quot; = &quot;no&quot; ]; then readlink(1) is not available as standard on Solaris 10. readLink=`which readlink` if [ ! `expr &quot;readLink&quot; : '\([^ ]\)'` = &quot;no&quot; ]; then if darwin ; then javaHome=&quot;`dirname \&quot;javaExecutable\&quot;`&quot; javaExecutable=&quot;`cd \&quot;javaHome\&quot; &amp;&amp; pwd -P`javac&quot; else javaExecutable=&quot;`readlink -f \&quot;javaExecutable\&quot;`&quot; fi javaHome=&quot;`dirname \&quot;javaExecutable\&quot;`&quot; javaHome=`expr &quot;javaHome&quot; : '\(.\)bin'` JAVA_HOME=&quot;javaHome&quot; export JAVA_HOME fi fi fi if [ -z &quot;JAVACMD&quot; ] ; then if [ -n &quot;JAVA_HOME&quot; ] ; then if [ -x &quot;JAVA_HOMEjreshjava&quot; ] ; then IBM's JDK on AIX uses strange locations for the executables JAVACMD=&quot;JAVA_HOMEjreshjava&quot; else JAVACMD=&quot;JAVA_HOMEbinjava&quot; fi else JAVACMD=&quot;`which java`&quot; fi fi if [ ! -x &quot;JAVACMD&quot; ] ; then echo &quot;Error: JAVA_HOME is not defined correctly.&quot; &gt;&amp;2 echo &quot; We cannot execute JAVACMD&quot; &gt;&amp;2 exit 1 fi if [ -z &quot;JAVA_HOME&quot; ] ; then echo &quot;Warning: JAVA_HOME environment variable is not set.&quot; fi CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher For Cygwin, switch paths to Windows format before running java if cygwin; then [ -n &quot;M2_HOME&quot; ] &amp;&amp; M2_HOME=`cygpath --path --windows &quot;M2_HOME&quot;` [ -n &quot;JAVA_HOME&quot; ] &amp;&amp; JAVA_HOME=`cygpath --path --windows &quot;JAVA_HOME&quot;` [ -n &quot;CLASSPATH&quot; ] &amp;&amp; CLASSPATH=`cygpath --path --windows &quot;CLASSPATH&quot;` fi traverses directory structure from process work directory to filesystem root first directory with .mvn subdirectory is considered project base directory find_maven_basedir() { local basedir=(pwd) local wdir=(pwd) while [ &quot;wdir&quot; != '' ] ; do if [ -d &quot;wdir&quot;.mvn ] ; then basedir=wdir break fi wdir=(cd &quot;wdir..&quot;; pwd) done echo &quot;{basedir}&quot; } concatenates all lines of a file concat_lines() { if [ -f &quot;1&quot; ]; then echo &quot;(tr -s '\n' ' ' &lt; &quot;1&quot;)&quot; fi } export MAVEN_PROJECTBASEDIR={MAVEN_BASEDIR:-(find_maven_basedir)} MAVEN_OPTS=&quot;(concat_lines &quot;MAVEN_PROJECTBASEDIR.mvnjvm.config&quot;) MAVEN_OPTS&quot; Provide a &quot;standardized&quot; way to retrieve the CLI args that will work with both Windows and non-Windows executions. MAVEN_CMD_LINE_ARGS=&quot;MAVEN_CONFIG @&quot; export MAVEN_CMD_LINE_ARGS WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain exec &quot;JAVACMD&quot; \ MAVEN_OPTS \ -classpath &quot;MAVEN_PROJECTBASEDIR.mvnwrappermaven-wrapper.jar&quot; \ &quot;-Dmaven.home={M2_HOME}&quot; &quot;-Dmaven.multiModuleProjectDirectory={MAVEN_PROJECTBASEDIR}&quot; \ {WRAPPER_LAUNCHER} &quot;@&quot;" />
      <item value="正中靶心" />
      <item value="正中" />
      <item value="目标结果一致" />
      <item value="目标结果" />
      <item value="目标" />
      <item value="目标结" />
      <item value="目标结构" />
      <item value="质检" />
      <item value="质量" />
      <item value="质量&#10;" />
      <item value="监管部门" />
      <item value="监管" />
      <item value="punish&#10;" />
      <item value="punish" />
      <item value="disciplin" />
      <item value="discipline" />
      <item value="不良后果" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="111" />
        <entry key="ENGLISH" value="95" />
        <entry key="LATIN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1656673389887" />
  </component>
  <component name="Settings">
    <option name="showExplanation" value="true" />
    <option name="showWordsOnStartup" value="true" />
  </component>
</application>