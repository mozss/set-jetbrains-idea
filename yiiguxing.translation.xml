<application>
  <component name="AppStorage">
    <option name="maxHistorySize" value="100" />
    <option name="newTranslationDialogCollapseDictViewer" value="false" />
    <option name="newTranslationDialogWidth" value="590" />
    <option name="newTranslationDialogX" value="531" />
    <option name="newTranslationDialogY" value="-712" />
    <histories>
      <item value="Provides miscellaneous interceptor implementations. More specific interceptors can be found in corresponding functionality packages, like &quot;transaction&quot; and &quot;orm&quot;." />
      <item value="Package containing Spring's basic AOP infrastructure, compliant with the AOP Alliance interfaces. Spring AOP supports proxying interfaces or classes, introductions, and offers static and dynamic pointcuts. Any Spring AOP proxy can be cast to the ProxyConfig AOP configuration interface in this package to add or remove interceptors. The ProxyFactoryBean is a convenient way to create AOP proxies in a BeanFactory or ApplicationContext. However, proxies can be created programmatically using the ProxyFactory class" />
      <item value="AspectJ integration package. Includes Spring AOP advice implementations for AspectJ 5 annotation-style methods, and an AspectJExpressionPointcut: a Spring AOP Pointcut implementation that allows use of the AspectJ pointcut expression language with the Spring AOP runtime framework. Note that use of this package does not require the use of the ajc compiler or AspectJ load-time weaver. It is intended to enable the use of a valuable subset of AspectJ functionality, with consistent semantics, with the proxy-based Spring AOP framework." />
      <item value="Support package for declarative AOP configuration, with XML schema being the primary configuration format." />
      <item value="Support for AOP-based scoping of target objects, with configurable backend." />
      <item value="alliance" />
      <item value="Description of an invocation to a method, given to an interceptor upon method-call. A method invocation is a joinpoint and can be intercepted by a method interceptor." />
      <item value="This interface represents an invocation in the program. An invocation is a joinpoint and can be intercepted by an interceptor." />
      <item value="Interceptor" />
      <item value="Joinpoint" />
      <item value="Invocation" />
      <item value="Constructor Interceptor" />
      <item value="Superclass for all AOP infrastructure exceptions. Unchecked, as such exceptions are fatal and end user code shouldn't be forced to catch them." />
      <item value="Copyright 2002-2018 the original author or authors. Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at https:www.apache.orglicensesLICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License." />
      <item value="public static void main(String[] args) { System.out.println(969);" />
      <item value="喷气式飞机" />
      <item value="喷气式" />
      <item value="hello" />
      <item value="class Bits { Bits() { }" />
      <item value="hello&#10;" />
      <item value="&lt;p&gt;Drop in replacement for the standard class loader of the JVM. You can use it in conjunction with the JavaWrapper to dynamically modifycreate classes as they're requested.&lt;p&gt; &lt;p&gt;This class loader recognizes special requests in a distinct format, i.e., when the name of the requested class contains with &quot;BCEL&quot; it calls the createClass() method with that name (everything bevor the BCEL is considered to be the package name. You can subclass the class loader and override that method. &quot;Normal&quot; classes class can be modified by overriding the modifyClass() method which is called just before defineClass().&lt;p&gt; &lt;p&gt;There may be a number of packages where you have to use the default class loader (which may also be faster). You can define the set of packages where to use the system class loader in the constructor. The default value contains &quot;java.&quot;, &quot;sun.&quot;, &quot;javax.&quot;&lt;p&gt;" />
      <item value="read(List&lt;Integer&gt; list) { super(&quot;ReaderThre" />
      <item value="p" />
      <item value="Copyright (c) $today.year. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi non lorem porttitor neque feugiat blandit. Ut vitae ipsum eget quam lacinia accumsan. Etiam sed turpis ac ipsum condimentum fringilla. Maecenas magna. Proin dapibus sapien vel ante. Aliquam erat volutpat. Pellentesque sagittis ligula eget metus. Vestibulum commodo. Ut rhoncus gravida arcu." />
      <item value="transformation" />
      <item value="recording" />
      <item value="Unlock Commercial Features" />
      <item value="https" />
      <item value="hierarchy" />
      <item value="println" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="29" />
        <entry key="ENGLISH" value="30" />
        <entry key="LATIN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1650335803260" />
  </component>
  <component name="Settings">
    <option name="showExplanation" value="true" />
    <option name="showWordsOnStartup" value="true" />
  </component>
</application>